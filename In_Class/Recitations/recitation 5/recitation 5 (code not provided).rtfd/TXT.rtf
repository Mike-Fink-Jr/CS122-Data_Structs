{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;\red38\green38\blue38;
\red255\green255\blue255;\red23\green47\blue137;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth220\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5380\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl256

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720\sl256\qr
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \pard\intbl\itap1\pardeftab720\sl256\qr
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720\qc

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720

\fs22 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth5880\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc

\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
Submitted by FINK, MICHAEL (MJF5614) on 2/16/2015 4:46:10 PM\
\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrs\brdrw20\brdrcf3 \trbrdrl\brdrs\brdrw20\brdrcf3 \trbrdrr\brdrs\brdrw20\brdrcf3 
\clvertalt \clshdrawnil \clwWidth1980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Points Awarded
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720\qr

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.00
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw20\brdrcf3 \trbrdrr\brdrs\brdrw20\brdrcf3 
\clvertalt \clshdrawnil \clwWidth1980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Missed
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720\qr

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.00
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw20\brdrcf3 \trbrdrb\brdrs\brdrw20\brdrcf3 \trbrdrr\brdrs\brdrw20\brdrcf3 
\clvertalt \clshdrawnil \clwWidth1980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Percentage
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720\qr

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 50.0%
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Today will be another day for converting recursive functions into loops, and will introduce a technique that can allow us to do so for a larger set of recursive functions.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The program for today is in sub-direotory 4 within the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 inclass
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  directory.\
Again, you can run the existing code once to make sure you know what the right answers are.\
Let us look at the function 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 reverseInput
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . This function is definitely not tail-recursive;in fact it is not even last-line recursive. There is an output operation occurring after the return from every recursive function call.\
And we cannot try the trick we used the end of last week's class -- operating on the current data before we change it, because displaying the current value now would not be reversing the data.\
We will actually need to save this operation for later, so will need a place to put that data. In general, the approach will look something like this:\
\pard\pardeftab720

\f1 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0      input a new value\
     if the input value is not zero\
         save this input value for later\
         go to the top of this code\
     else\
         output "Reversed data: "\
         display all the saved values in reverse order\
\pard\pardeftab720

\f0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 When we imagine this being converted into a while loop, we see that many values will need to be saved. It also should be evident that a stack would be a very useful data structure.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Today, to avoid the need to implement a linked list, we will implement the stack as an array. Using an array requires knowing how big the array should be, and my pseudocode here gives no insight on how many times it will repeat.\
Fortunately, we have some other information available to us in the function documentation. How big should this array be? 
\f2\fs24 \cf2 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 10
\f0\fs26 \cf4 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.0/1.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth900\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth900\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Okay, so we will need an array of 10 elements to hold the possible inputs to this program. We will also need a subscript variable to make sure we use a different array position every time.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Here are some declarations to help us:\
\pard\pardeftab720

\f1 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 int save[10];     // array to save input values\
int savePos;      // current position in array\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 savePos = 0;      // start at the beginning of the array\
\pard\pardeftab720

\f0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 That should be enough information for you to complete the loop for the first half of our solution. The code will save input values into the array until the 0 appears, and then start doing the output.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 NOTE: It is recommended that you follow the pseudocode model of examining a value before storing into the array. Many solutions that implement directly into the array prove to be bug-prone!\
We have several values to display, which suggests another loop. What will be the loop condition, and what will be updated to affect that loop condition?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Feedback: 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Just as we had one loop approaching the base case, now we have another loop coming back.\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1620\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth12520\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth1100\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.0/3.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1620\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth13720\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth13720\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 savePos counted upwards when filling the array, so will count downwards for this part. It will count down as long as its value is greater than zero (there is more work to do).\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 We had one loop representing going down into the base case of the recursion. Now we have another loop representing coming back from that base case. This second loop simply displays the values from the array in reverse order.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Complete this function and verify that it works, and we will move to the next one.\
Let us temporarily set aside the negative exponent part of this problem, and focus on the recursion that comes from positive exponents. Although we could use last week's trick on this problem, I want to use today's technique for practice. Since we multiply by 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 base
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  after every recursive return, we will save that value in an array.\
Once again, there is no prior knowledge on exactly how many recursive calls there would have been, and this time, there is no documented pre-condition giving us an answer.\
But if you look carefully at the test condition that will become our loop condition, there actually is a hint to the maximum number of times our loop will repeat. It is all right if you do not know the exact numeric value, but what can you say about the maximum number of repetitions?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Feedback: 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you thought this was infinite recursion or an infinite loop, then you need to brush up the integer arithmetic rules in this language.\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1880\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth12300\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth1060\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1880\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth13460\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth13460\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The exponent is repeatedly dividing in half, down towards 1. Since it is integer division, ultimately dividing 1 by 2 will yield 0, ending the repetition.\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 4.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 int
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  type here supports values in the range of +/- 2^31, so there would be a maximum of 31 divisions before the loop ends.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 So, we can set up an array of 32 elements (just to be safe), and start filling it up at element 0. Then once we are done dividing, we can pull those values back out of the array and multiply them together.\
Do so, and then we will address the negative exponent.\
IMPORTANT NOTE:\uc0\u8232 Be sure that your code updates the variables in the same way as this week's recursive function updated its function arguments. Do not simply copy last week's solution or implement some other exponentiation algorithm. If you do not adapt this week's approach to the problem, you will get zero credit for adapting this week's approach!\
\pard\pardeftab720\sa128
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For negative exponents, all this needs to do is to divide into 1 at the end. That only needs to happen once, so we do not need to create any new arrays. All we need is some way at the beginning to remember to do that division at the end. Pick an easy way to do that, and hopefully it will work.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The last function handles expressions with multiple exponentiation operations. Now, this 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ^
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  symbol does not have the desired meaning in the C++ language (and no machine has that as an instruction anyway), but we will use it out of convenience.\
First all, the thing to notice here is that an expression 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 x^y^z
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  evaluates to 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 x^(y^z)
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  and not 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 (x^y)^z
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , because the latter has an equivalent simpler representation that includes only one exponent operator. What is that equivalent?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Feedback: 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 It is good to remember your algebra.\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth6720\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth540\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth7360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth7360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 (x^y)^z = x^yz If you don't believe me, try a few small examples.\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Unlike most arithmetic operations, the exponentiation operation evaluates from right to left.Therefore the given function holds onto the base until it is ready to exponentiate to the correct power.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Regarding the use of 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 static_cast
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  in this code:\uc0\u8232 This tells the compiler that I wish to treat that value as an integer instead of a real number, and that I am already willing to drop any fractional part there would be. If I did not put this into the code, I might get warnings that using a real number as an integer would lose information (which is often true).\
Now, I could avoid the whole issue by simply having the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 power
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  function itself only work with integers (which of course reduces its applicability). But that would severely hamper this function with our finite integer range. 10^10^1 overflows; 2^2^5 overflows; so I chose to let this use real number variables, as long as the exponents themselves have integer values that 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 power
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  expects.\
Last week, I tried to contrast last-line recursion (last statement recurses) and tail recursion (last operation is recursion).\
True or False: This function is last-line recursive.\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 A) True\
B) False\
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Feedback: 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Indeed, the return statement is the last to execute here.\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth900\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth900\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 True\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 True or False: This function is tail recursive.\
A) True\
B) False\
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Feedback: 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Our most recent answer is not the final answer.\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.0/1.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth900\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth900\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 False\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 7.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This function is not tail recursive, so the fix is not as easy at those last week. But today's technique will certainly work just fine.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Feel free to assume there will be no more than three exponentiation operators (any array bigger than that will be fine). The third time around, this process should be very easy to implement and check.\
As a historical note, the quick sort was first implemented in this way. Recursion was not a well-understood topic, and most compilers or computer installations had no support for recursion.\
Take a look at the paragraphs titled "Quicksort" in {\field{\*\fldinst{HYPERLINK "http://rabbit.eng.miami.edu/class/een511/quicksort.pdf"}}{\fldrslt \cf6 \expnd0\expndtw0\kerning0
\ul \ulc6 \outl0\strokewidth0 \strokec6 this paper from 1960}}. You will see a reference to a "nest", which is exactly the same as this array we have been using today.\
The biggest impediment to generalizing this solution approach is predicting the size of the array to hold the saved values. Even that 1960 paper had to worry about that. In the next couple weeks, we will be focusing a programming technique that will allow us to allocate the memory we need, without allocating too little or far too much.\
Before you go, be sure to upload your modified .cpp file with the button below.\
\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "https://cms.psu.edu/Section/Assessment/Delivery/OfflineItemDownload.aspx?deliveredId=352ada8d-c001-481f-8a0e-dd8437a34ed0&file=recitation4Source.cpp"}}{\fldrslt \cf6 \expnd0\expndtw0\kerning0
\ul \ulc6 \outl0\strokewidth0 \strokec6 recitation4Source.cpp}}\
\
\
\pard\pardeftab720

\fs24 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 wrong file\
\pard\pardeftab720\qc

\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1840\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0.0/9.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
}