{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;\red38\green38\blue38;
\red23\green47\blue137;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth220\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5380\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl256

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720\sl256\qr
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \pard\intbl\itap1\pardeftab720\sl256\qr
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720\qc

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720

\fs22 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth5880\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc

\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
Submitted by FINK, MICHAEL (MJF5614) on 4/6/2015 4:42:34 PM\
\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrs\brdrw20\brdrcf3 \trbrdrl\brdrs\brdrw20\brdrcf3 \trbrdrr\brdrs\brdrw20\brdrcf3 
\clvertalt \clshdrawnil \clwWidth1980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Points Awarded
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720\qr

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 13.00
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw20\brdrcf3 \trbrdrr\brdrs\brdrw20\brdrcf3 
\clvertalt \clshdrawnil \clwWidth1980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Missed
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720\qr

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 7.00
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw20\brdrcf3 \trbrdrb\brdrs\brdrw20\brdrcf3 \trbrdrr\brdrs\brdrw20\brdrcf3 
\clvertalt \clshdrawnil \clwWidth1980\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth740\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadt80 \clpadl80 \clpadb80 \clpadr80 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Percentage
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720\qr

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 65.0%
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Today's Recitation will be another day of C++ coding, which hasn't been the case for a couple months.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The program is all contained within a single file named 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 except.cpp
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  within the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 11
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  sub-directory for Recitations.\
Run the existing code, which fills up an array with factorial values (factorials), and then displays them. Try to explain the meaning and cause of the other visible output.\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth9660\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth820\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth10580\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth10580\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The vector::at() method indicates that the given subscript is out of range (outside the vector)\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The "right" thing to do in this case is to actually make the vector the correct size to begin with, but today is an exercise in Exception Handling, so we will pretend that we do not know what that size should be.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Today's (bad) strategy is to make the vector be bigger, as needed. The vector template has a method called 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 resize()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  that we could use to make it larger. Insert the following code between the existing 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 try
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  and 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 catch
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  blocks:\
\pard\pardeftab720

\f1 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
    catch (out_of_range &ex)\
        \{\
            small.resize( 1+small.size() );\
        \}\
\pard\pardeftab720\sa256

\f0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 What difference does this make in your results?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth7180\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth580\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth7860\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth7860\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The output should now consist of 15 values and no other messages.\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Consider carefully how the current program behaves.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 How many times is 5th value of the vector computed and stored?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth6800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth560\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.0/1.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth7460\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth7460\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6 times -- for vector of length 10-15 inclusive. (5 is close enough)\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 4.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 It might be better to let the counting loop continue where it left off than to restart it from the beginning, so let us instead catch the out_of_range exception within the for loop in the factorialVector function.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Make these changes to that function:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa102
\ls1\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Divide the assignment statement into two assignment statements, computing into the given 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 product
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  variable, then storing that variable into the vector.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Wrap a 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 try
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  statement around both assignment statements.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Add a 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 catch
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  block that will use 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 push_back
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  to add the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 product
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  to the vector when out of range.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Also, since the repetition is all handled here, remove the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 while
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  loop and the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 repeat
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  variable from the main function (to make it a bit cleaner).\
This program should now run without complaining about subscripts out of range.\
How many numeric results appear in the output now?\uc0\u8232 Do they seem to be correct factorials?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720

\fs24 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 well, that laziness cost you 1 point, so.....\
\pard\pardeftab720\qc

\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth12760\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth1120\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth13980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth13980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 There should be 15 values, but the last few will be incorrect. Even without a calculator, it should be evident that multiplying a 10-digit number by 14 or 15 would not yield another 10-digit number (especially a smaller one)\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Before fixing the new error, I want to revisit the first one (subscript out of range).\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This exception 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 out_of_range
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  is one of the standard exceptions defined in C++, and is thrown by the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 vector::at()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  method. This method is basically very much like array subscripting.\
The 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 vector
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  actually overloads the [] subscript operator, and programmers often do that.\
This is only a temporary side-trip, but you have two options on how to take this trip:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa102
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 You can temporarily copy the two assignment statements in the for loop, comment one pair out,and edit the other pair. Then afterwards, delete the edited pair and uncomment the original.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 You can just edit the existing pair for now, and then edit them back afterwards.\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The edit will be to replace all the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 at()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  calls with square brackets [].\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Report what happens if this vector tries to use square brackets instead of the at method.\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1620\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth12540\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth1080\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1620\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth13720\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth13720\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Results will vary depending on platform, but they are generally not good. There is no subscript checking, so this function will clobber 6 memory locations outside the array.\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Okay; now that we are reminded that bad subscripts are a bad thing, let's not do that again. Put the calls to 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 at()
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  back in place.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 It's nice to know that the exception is thrown, but there is a price to pay. To be able to throw the exception, the program has to actually take time to verify that the subscript is in bounds, which slows it down. It would generally be better for a programming to guarantee good subscripts than to rely on exception handling finding the bad ones.\
But since today is an exercise in Exception Handling, we'll let it slide for now.\
Let's go back to the incorrect numeric answers that were seen earlier. Integer Overflow is the case where the result of an integer calculation cannot actually be stored in an integer variable.\
How might you get a program to identify that this multiplication results in integer overflow, without using any other variable types?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1660\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth12500\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth1080\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1660\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth13680\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth13680\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Since we cannot actually compare to the correct product, the easiest is to back compute and see if dividing one factor into the computed product gives back the other.\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 7.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 One can verify the results of a multiplication with the help of a division test.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If the division gives a wrong answer, then we would know the product was incorrect.\
Since the machine did not throw the exception for us, we will have to do that ourselves.\
Place the following statement into an if statement with the appropriate condition.\
\pard\pardeftab720

\f1 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0             throw overflow_error("Integer Overflow");\
\pard\pardeftab720

\f0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This should be done before storing an incorrect product into the vector.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 How many values are displayed when the program runs now?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth4680\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth5140\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth5140\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 There should be 12 values, up to 12 factorial\cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 8.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This most recent version of a program still throws and catches an exception.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Which function is active when the exception is thrown?\
Which function is active when the exception is caught?\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\
\
\pard\pardeftab720\qc
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth8060\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth660\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.0/2.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth2360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clmgf \clvertalt \clshdrawnil \clwWidth8820\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clmrg \clvertalt \clshdrawnil \clwWidth8820\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Correct Answer(s):
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The overflow exception is thrown in 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 factorialVector
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  and caught in 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 main
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\pard\pardeftab720

\b \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 9.\
\pard\pardeftab720

\b0 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This concludes the Exception Handling part of the Recitation, but we are not yet done with this program.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 As was pointed out before, these are not the best uses for Exception Handling. Instead of catching our own exceptions, we should be writing our code not to throw them in the first place.\
So, let us make a better version of 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 factorialVector
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa102
\ls3\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Put comment markers in front of every line in the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 for loop
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  (do NOT remove the code!)\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Rewrite the for loop so that it will produce the correct results (in the correct size vector), but without using any exception handling.\
\pard\pardeftab720\sa256
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You may still use the 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 push_back
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  method for the vector, but no 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 try, catch, throw, break,
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  or 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 continue
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  statements.\
Also, do not arbitrarily assign 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 i
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  a value to force the loop to exit. Pick a more meaningful loop condition instead.\
The 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 try - catch
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  in 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 main
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  can stay as it is (it simply will catch nothing)\
You MAY change the declaration of 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 small
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  in 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 main
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  IF you make it 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 smaller
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . (A good choice will make your 
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 factorialVector
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  function simpler.)\
Your program should still generate all of the factorials representable in the integer type, and no extra values afterwards.\
Submit whatever program you have with the appropriate button below (as was done long ago).\
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "https://cms.psu.edu/Section/Assessment/Delivery/OfflineItemDownload.aspx?deliveredId=340c4b84-4b18-4e99-be0f-172d76cb544a&file=Source.cpp"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Source.cpp}}\
\
\
\pard\pardeftab720

\fs24 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 no overflow handling\
\pard\pardeftab720\qc

\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table for Individual Question Feedback\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1840\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth800\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx5760
\clvertalc \clshdrawnil \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt40 \clpadl40 \clpadb40 \clpadr40 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Points Earned:\cell 
\pard\intbl\itap1\pardeftab720

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 4.0/5.0\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell \lastrow\row
\pard\pardeftab720
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Source.cpp\
\
\
\
\
\
\
\pard\pardeftab720

\f1\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // A short program illustrating what can (and cannot)\
// be done with exceptions in C++\
#include <iostream>\
#include <stdexcept>\
#include <vector>\
using namespace std;\
\
//  FactorialVector\
//  Fills up a Vector with computed factorials\
//  An array would typically make more sense,\
//  but arrays provide no subscript range checking,\
//  which is one of the features of today's exercise.\
void factorialVector(vector<int> &vec, int n)\
\{\
	int product=1;\
	vec[0] = 1;				// 0! = 1\
	for (int i = 1; i <= n; i++)\
	\{\
		//	if (i == 5)cout << "b" << endl;   -----> Q3\
		/*try\
		\{\
		product *= i;\
		if (i >= vec.size())\
		throw product;\
		else if (product>30 && product/30==vec.at(i)*i/30)\
		throw overflow_error("Integer Overflow");\
		vec.at(i) = product;\
		\}\
		catch (int product)\
		\{\
\
		vec.push_back(product);\
		\}\
		\}*/\
\
\
		if (i >= vec.size())\
			vec.push_back(vec.at(i - 1) * i);\
		else\
			vec.at(i) = vec.at(i - 1) * i;\
	\}\
\}\
\
int main()\
\{\
	vector<int> small(10);		// this vector is too small\
	//bool repeat = true;			// to allow multiple attempts\
\
	//while (repeat)\
//	\{\
		//try\
		//\{\
			factorialVector(small, 15);\
			//repeat = false;		// stop when it works\
		//\}\
		/*catch (out_of_range &ex)\
		\{\
			\
			small.resize(1 + small.size());\
		\}\
		catch (exception &ex)\
		\{\
			cout << "Caught " << ex.what() << endl;\
			//repeat = false;		// stop when some new exception happens\
		\}\
	//\}*/\
	for (int i = 0; i<small.size(); i++)	// display the results\
		cout << small[i] << " ";\
	cout << endl;\
\}\
}